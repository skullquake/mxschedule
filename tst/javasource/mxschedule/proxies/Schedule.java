// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package mxschedule.proxies;

/**
 * Schedule Config
 */
public class Schedule
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject scheduleMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "MxSchedule.Schedule";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Cron("Cron"),
		Schedule_Microflows("MxSchedule.Schedule_Microflows");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Schedule(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "MxSchedule.Schedule"));
	}

	protected Schedule(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject scheduleMendixObject)
	{
		if (scheduleMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("MxSchedule.Schedule", scheduleMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a MxSchedule.Schedule");

		this.scheduleMendixObject = scheduleMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Schedule.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static mxschedule.proxies.Schedule initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return mxschedule.proxies.Schedule.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static mxschedule.proxies.Schedule initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new mxschedule.proxies.Schedule(context, mendixObject);
	}

	public static mxschedule.proxies.Schedule load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return mxschedule.proxies.Schedule.initialize(context, mendixObject);
	}

	public static java.util.List<mxschedule.proxies.Schedule> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<mxschedule.proxies.Schedule> result = new java.util.ArrayList<mxschedule.proxies.Schedule>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//MxSchedule.Schedule" + xpathConstraint))
			result.add(mxschedule.proxies.Schedule.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Cron
	 */
	public final java.lang.String getCron()
	{
		return getCron(getContext());
	}

	/**
	 * @param context
	 * @return value of Cron
	 */
	public final java.lang.String getCron(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Cron.toString());
	}

	/**
	 * Set value of Cron
	 * @param cron
	 */
	public final void setCron(java.lang.String cron)
	{
		setCron(getContext(), cron);
	}

	/**
	 * Set value of Cron
	 * @param context
	 * @param cron
	 */
	public final void setCron(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String cron)
	{
		getMendixObject().setValue(context, MemberNames.Cron.toString(), cron);
	}

	/**
	 * @return value of Schedule_Microflows
	 */
	public final java.util.List<mxmodelreflection.proxies.Microflows> getSchedule_Microflows() throws com.mendix.core.CoreException
	{
		return getSchedule_Microflows(getContext());
	}

	/**
	 * @param context
	 * @return value of Schedule_Microflows
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<mxmodelreflection.proxies.Microflows> getSchedule_Microflows(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<mxmodelreflection.proxies.Microflows> result = new java.util.ArrayList<mxmodelreflection.proxies.Microflows>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.Schedule_Microflows.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(mxmodelreflection.proxies.Microflows.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of Schedule_Microflows
	 * @param schedule_microflows
	 */
	public final void setSchedule_Microflows(java.util.List<mxmodelreflection.proxies.Microflows> schedule_microflows)
	{
		setSchedule_Microflows(getContext(), schedule_microflows);
	}

	/**
	 * Set value of Schedule_Microflows
	 * @param context
	 * @param schedule_microflows
	 */
	public final void setSchedule_Microflows(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<mxmodelreflection.proxies.Microflows> schedule_microflows)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (mxmodelreflection.proxies.Microflows proxyObject : schedule_microflows)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.Schedule_Microflows.toString(), identifiers);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return scheduleMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final mxschedule.proxies.Schedule that = (mxschedule.proxies.Schedule) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "MxSchedule.Schedule";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
